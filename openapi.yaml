openapi: 3.0.4
info:
  title: PhotoBank.Api
  version: 1.0.0
servers:
  - url: /api
paths:
  /admin/access-profiles:
    get:
      tags:
        - AdminAccessProfiles
      operationId: AdminAccessProfiles_List
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccessProfileDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccessProfileDto'
    post:
      tags:
        - AdminAccessProfiles
      operationId: AdminAccessProfiles_Create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessProfileDto'
          text/json:
            schema:
              $ref: '#/components/schemas/AccessProfileDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/AccessProfileDto'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessProfileDto'
            text/json:
              schema:
                $ref: '#/components/schemas/AccessProfileDto'
  '/admin/access-profiles/{id}':
    get:
      tags:
        - AdminAccessProfiles
      operationId: AdminAccessProfiles_Get
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessProfileDto'
            text/json:
              schema:
                $ref: '#/components/schemas/AccessProfileDto'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
        - AdminAccessProfiles
      operationId: AdminAccessProfiles_Update
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessProfileDto'
          text/json:
            schema:
              $ref: '#/components/schemas/AccessProfileDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/AccessProfileDto'
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - AdminAccessProfiles
      operationId: AdminAccessProfiles_Delete
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
  '/admin/access-profiles/{id}/assign-user/{userId}':
    post:
      tags:
        - AdminAccessProfiles
      operationId: AdminAccessProfiles_AssignUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
    delete:
      tags:
        - AdminAccessProfiles
      operationId: AdminAccessProfiles_UnassignUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
  '/admin/access-profiles/{id}/assign-role/{roleId}':
    post:
      tags:
        - AdminAccessProfiles
      operationId: AdminAccessProfiles_AssignRole
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: roleId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
    delete:
      tags:
        - AdminAccessProfiles
      operationId: AdminAccessProfiles_UnassignRole
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: roleId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
  /auth/login:
    post:
      tags:
        - Auth
      operationId: Auth_Login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestDto'
          text/json:
            schema:
              $ref: '#/components/schemas/LoginRequestDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/LoginRequestDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponseDto'
            text/json:
              schema:
                $ref: '#/components/schemas/LoginResponseDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /auth/register:
    post:
      tags:
        - Auth
      operationId: Auth_Register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequestDto'
          text/json:
            schema:
              $ref: '#/components/schemas/RegisterRequestDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/RegisterRequestDto'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /auth/user:
    get:
      tags:
        - Auth
      operationId: Auth_GetUser
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
            text/json:
              schema:
                $ref: '#/components/schemas/UserDto'
    put:
      tags:
        - Auth
      operationId: Auth_UpdateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /auth/telegram/subscriptions:
    get:
      tags:
        - Auth
      operationId: Auth_GetTelegramSubscriptions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TelegramSubscriptionDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TelegramSubscriptionDto'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /auth/telegram/exchange:
    post:
      tags:
        - Auth
      operationId: Auth_TelegramExchange
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelegramExchangeRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/TelegramExchangeRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/TelegramExchangeRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelegramExchangeResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/TelegramExchangeResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /auth/debug/effective-access:
    get:
      tags:
        - Auth
      operationId: Auth_GetEffective
      responses:
        '200':
          description: OK
  /faces:
    get:
      tags:
        - Faces
      operationId: Faces_GetFacesPage
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            format: int32
            minimum: 1
          description: Page number (1-based)
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
            minimum: 1
          description: Page size
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FaceDtoPageResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/FaceDtoPageResponse'
    put:
      tags:
        - Faces
      operationId: Faces_Update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FaceDto'
          text/json:
            schema:
              $ref: '#/components/schemas/FaceDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/FaceDto'
      responses:
        '200':
          description: OK
  /Paths:
    get:
      tags:
        - Paths
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PathDto'
  /persongroups:
    get:
      tags:
        - PersonGroups
      operationId: PersonGroups_GetAll
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PersonGroupDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PersonGroupDto'
    post:
      tags:
        - PersonGroups
      operationId: PersonGroups_Create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonGroupDto'
          text/json:
            schema:
              $ref: '#/components/schemas/PersonGroupDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PersonGroupDto'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonGroupDto'
            text/json:
              schema:
                $ref: '#/components/schemas/PersonGroupDto'
  '/persongroups/{groupId}':
    put:
      tags:
        - PersonGroups
      operationId: PersonGroups_Update
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonGroupDto'
          text/json:
            schema:
              $ref: '#/components/schemas/PersonGroupDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PersonGroupDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonGroupDto'
            text/json:
              schema:
                $ref: '#/components/schemas/PersonGroupDto'
    delete:
      tags:
        - PersonGroups
      operationId: PersonGroups_Delete
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: No Content
  '/persongroups/{groupId}/persons/{personId}':
    post:
      tags:
        - PersonGroups
      operationId: PersonGroups_AddPerson
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: personId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: No Content
    delete:
      tags:
        - PersonGroups
      operationId: PersonGroups_RemovePerson
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: personId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: No Content
  /persons:
    get:
      tags:
        - Persons
      operationId: Persons_GetAll
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PersonDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PersonDto'
    post:
      tags:
        - Persons
      operationId: Persons_Create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonDto'
          text/json:
            schema:
              $ref: '#/components/schemas/PersonDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PersonDto'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonDto'
            text/json:
              schema:
                $ref: '#/components/schemas/PersonDto'
  '/persons/{personId}':
    put:
      tags:
        - Persons
      operationId: Persons_Update
      parameters:
        - name: personId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonDto'
          text/json:
            schema:
              $ref: '#/components/schemas/PersonDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PersonDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonDto'
            text/json:
              schema:
                $ref: '#/components/schemas/PersonDto'
    delete:
      tags:
        - Persons
      operationId: Persons_Delete
      parameters:
        - name: personId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: No Content
  /photos/search:
    post:
      tags:
        - Photos
      operationId: Photos_SearchPhotos
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterDto'
          text/json:
            schema:
              $ref: '#/components/schemas/FilterDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/FilterDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhotoItemDtoPageResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PhotoItemDtoPageResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/photos/{id}':
    get:
      tags:
        - Photos
      operationId: Photos_GetPhoto
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhotoDto'
            text/json:
              schema:
                $ref: '#/components/schemas/PhotoDto'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /photos/upload:
    post:
      tags:
        - Photos
      operationId: Photos_Upload
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
                storageId:
                  type: integer
                  format: int32
                path:
                  type: string
            encoding:
              files:
                style: form
              storageId:
                style: form
              path:
                style: form
      responses:
        '200':
          description: OK
  /photos/duplicates:
    get:
      tags:
        - Photos
      operationId: Photos_GetDuplicates
      parameters:
        - name: id
          in: query
          schema:
            type: integer
            format: int32
        - name: hash
          in: query
          schema:
            type: string
        - name: threshold
          in: query
          schema:
            type: integer
            format: int32
            default: 5
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PhotoItemDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PhotoItemDto'
  /Storages:
    get:
      tags:
        - Storages
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StorageDto'
  /Tags:
    get:
      tags:
        - Tags
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TagDto'
  /admin/users:
    get:
      tags:
        - Users
      operationId: Users_GetAll
      parameters:
        - name: Limit
          in: query
          schema:
            maximum: 200
            minimum: 1
            type: integer
            format: int32
        - name: Offset
          in: query
          schema:
            maximum: 2147483647
            minimum: 0
            type: integer
            format: int32
        - name: Sort
          in: query
          schema:
            type: string
        - name: Search
          in: query
          schema:
            type: string
        - name: HasTelegram
          in: query
          schema:
            type: boolean
        - name: SortField
          in: query
          schema:
            type: string
        - name: SortDescending
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
    post:
      tags:
        - Users
      operationId: Users_Create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
            text/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/admin/users/{id}':
    put:
      tags:
        - Users
      operationId: Users_Update
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - Users
      operationId: Users_Delete
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/admin/users/{id}/reset-password':
    post:
      tags:
        - Users
      operationId: Users_ResetPassword
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordDto'
          text/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ResetPasswordDto'
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/admin/users/{id}/roles':
    put:
      tags:
        - Users
      operationId: Users_SetRoles
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetRolesDto'
          text/json:
            schema:
              $ref: '#/components/schemas/SetRolesDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SetRolesDto'
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /version:
    get:
      tags:
        - Version
      operationId: Version_Get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
components:
  schemas:
    AccessProfileDateRangeAllowDto:
      required:
        - fromDate
        - profileId
        - toDate
      type: object
      properties:
        profileId:
          type: integer
          format: int32
        fromDate:
          type: string
          format: date
        toDate:
          type: string
          format: date
      additionalProperties: false
    AccessProfileDto:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          maxLength: 128
          minLength: 1
          type: string
        description:
          maxLength: 512
          type: string
          nullable: true
        flags_CanSeeNsfw:
          type: boolean
        assignedUsersCount:
          maximum: 2147483647
          minimum: 0
          type: integer
          format: int32
        storages:
          type: array
          items:
            $ref: '#/components/schemas/AccessProfileStorageAllowDto'
          nullable: true
        personGroups:
          type: array
          items:
            $ref: '#/components/schemas/AccessProfilePersonGroupAllowDto'
          nullable: true
        dateRanges:
          type: array
          items:
            $ref: '#/components/schemas/AccessProfileDateRangeAllowDto'
          nullable: true
      additionalProperties: false
    AccessProfilePersonGroupAllowDto:
      required:
        - personGroupId
        - profileId
      type: object
      properties:
        profileId:
          type: integer
          format: int32
        personGroupId:
          type: integer
          format: int32
      additionalProperties: false
    AccessProfileStorageAllowDto:
      required:
        - profileId
        - storageId
      type: object
      properties:
        profileId:
          type: integer
          format: int32
        storageId:
          type: integer
          format: int32
      additionalProperties: false
    CreateUserDto:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
        phoneNumber:
          type: string
          nullable: true
        roles:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    FaceBoxDto:
      required:
        - height
        - left
        - top
        - width
      type: object
      properties:
        top:
          type: integer
          format: int32
        left:
          type: integer
          format: int32
        width:
          type: integer
          format: int32
        height:
          type: integer
          format: int32
      additionalProperties: false
    FaceDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
        personId:
          type: integer
          format: int32
          nullable: true
        age:
          type: number
          format: double
          nullable: true
        gender:
          type: boolean
          nullable: true
        smile:
          type: number
          format: double
          nullable: true
        faceAttributes:
          type: string
          nullable: true
        faceBox:
          $ref: '#/components/schemas/FaceBoxDto'
        friendlyFaceAttributes:
          type: string
          nullable: true
        provider:
          type: string
          nullable: true
        photoId:
          type: integer
          format: int32
        identifiedWithConfidence:
          type: number
          format: double
        identityStatus:
          $ref: '#/components/schemas/IdentityStatusDto'
        imageUrl:
          type: string
          nullable: true
      additionalProperties: false
    FilterDto:
      type: object
      properties:
        page:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        storages:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        isBW:
          type: boolean
          nullable: true
        isAdultContent:
          type: boolean
          nullable: true
        isRacyContent:
          type: boolean
          nullable: true
        relativePath:
          type: string
          nullable: true
        paths:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        caption:
          type: string
          nullable: true
        takenDateFrom:
          type: string
          format: date-time
          nullable: true
        takenDateTo:
          type: string
          format: date-time
          nullable: true
        thisDay:
          $ref: '#/components/schemas/ThisDayDto'
        personNames:
          type: array
          items:
            type: string
          nullable: true
        tagNames:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    GeoPointDto:
      required:
        - latitude
        - longitude
      type: object
      properties:
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
      additionalProperties: false
    IdentityStatusDto:
      enum:
        - Undefined
        - NotDetected
        - NotIdentified
        - Identified
        - ForReprocessing
        - StopProcessing
      type: string
    LoginRequestDto:
      required:
        - email
        - password
        - rememberMe
      type: object
      properties:
        email:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
        rememberMe:
          type: boolean
      additionalProperties: false
    LoginResponseDto:
      required:
        - token
      type: object
      properties:
        token:
          type: string
          nullable: true
      additionalProperties: false
    PathDto:
      required:
        - path
        - storageId
      type: object
      properties:
        storageId:
          type: integer
          format: int32
        path:
          minLength: 1
          type: string
      additionalProperties: false
    PersonDto:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          minLength: 1
          type: string
      additionalProperties: false
    PersonGroupDto:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          minLength: 1
          type: string
        persons:
          type: array
          items:
            $ref: '#/components/schemas/PersonDto'
          nullable: true
      additionalProperties: false
    PhotoDto:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          minLength: 1
          type: string
        scale:
          type: number
          format: double
        takenDate:
          type: string
          format: date-time
          nullable: true
        previewUrl:
          type: string
          nullable: true
        location:
          $ref: '#/components/schemas/GeoPointDto'
        orientation:
          type: integer
          format: int32
          nullable: true
        faces:
          type: array
          items:
            $ref: '#/components/schemas/FaceDto'
          nullable: true
        captions:
          type: array
          items:
            type: string
          nullable: true
        tags:
          type: array
          items:
            type: string
          nullable: true
        adultScore:
          type: number
          format: double
        racyScore:
          type: number
          format: double
        height:
          type: integer
          format: int32
        width:
          type: integer
          format: int32
      additionalProperties: false
    PhotoItemDto:
      required:
        - id
        - name
        - relativePath
        - storageName
      type: object
      properties:
        id:
          type: integer
          format: int32
        thumbnailUrl:
          type: string
          nullable: true
        name:
          minLength: 1
          type: string
        takenDate:
          type: string
          format: date-time
          nullable: true
        isBW:
          type: boolean
        isAdultContent:
          type: boolean
        adultScore:
          type: number
          format: double
        isRacyContent:
          type: boolean
        racyScore:
          type: number
          format: double
        storageName:
          minLength: 1
          type: string
        relativePath:
          minLength: 1
          type: string
        tags:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        persons:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        captions:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    PhotoItemDtoPageResponse:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: '#/components/schemas/PhotoItemDto'
          nullable: true
      additionalProperties: false
    FaceDtoPageResponse:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: '#/components/schemas/FaceDto'
          nullable: true
      additionalProperties: false
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
          nullable: true
        instance:
          type: string
          nullable: true
      additionalProperties: { }
    RegisterRequestDto:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
      additionalProperties: false
    ResetPasswordDto:
      required:
        - newPassword
      type: object
      properties:
        newPassword:
          type: string
          nullable: true
      additionalProperties: false
    SetRolesDto:
      type: object
      properties:
        roles:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    StorageDto:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          minLength: 1
          type: string
      additionalProperties: false
    TagDto:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          minLength: 1
          type: string
      additionalProperties: false
    TelegramExchangeRequest:
      type: object
      properties:
        telegramUserId:
          type: string
        username:
          type: string
          nullable: true
      additionalProperties: false
    TelegramExchangeResponse:
      type: object
      properties:
        accessToken:
          type: string
          nullable: true
        expiresIn:
          type: integer
          format: int32
      additionalProperties: false
    TelegramSubscriptionDto:
      required:
        - telegramSendTimeUtc
        - telegramUserId
      type: object
      properties:
        telegramUserId:
          type: string
        telegramSendTimeUtc:
          type: string
          format: date-span
      additionalProperties: false
    ThisDayDto:
      type: object
      properties:
        day:
          type: integer
          format: int32
        month:
          type: integer
          format: int32
      additionalProperties: false
    UpdateUserDto:
      type: object
      properties:
        phoneNumber:
          type: string
          nullable: true
        telegramUserId:
          type: string
          nullable: true
        telegramSendTimeUtc:
          type: string
          format: date-span
          nullable: true
      additionalProperties: false
    UserDto:
      required:
        - email
        - id
      type: object
      properties:
        id:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        phoneNumber:
          type: string
          nullable: true
        telegramUserId:
          type: string
          nullable: true
        telegramSendTimeUtc:
          type: string
          format: date-span
          nullable: true
        roles:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
  securitySchemes:
    Bearer:
      type: http
      description: 'Введите токен JWT так: Bearer {токен}'
      scheme: bearer
      bearerFormat: JWT
security:
  - Bearer: [ ]