// ПРИМЕР: Кастомный fetch с авторизацией для Orval
import AsyncStorage from '@react-native-async-storage/async-storage';

const STORAGE_TOKEN_KEY = 'auth_token';
const BASE_URL = 'https://your-api-domain.com/api';

export interface FetchConfig extends RequestInit {
  url: string;
  params?: Record<string, unknown>;
}

export const customFetch = async <T>(config: FetchConfig): Promise<T> => {
  const { url, params, headers: configHeaders, ...restConfig } = config;

  // Получаем токен
  const token = await AsyncStorage.getItem(STORAGE_TOKEN_KEY);

  // Формируем URL с query параметрами
  let fullUrl = `${BASE_URL}${url}`;
  if (params) {
    const searchParams = new URLSearchParams(
      params as Record<string, string>
    );
    fullUrl += `?${searchParams.toString()}`;
  }

  // Формируем headers
  const headers: HeadersInit = {
    'Content-Type': 'application/json',
    ...configHeaders,
  };

  if (token) {
    headers.Authorization = `Bearer ${token}`;
  }

  // Делаем запрос
  const response = await fetch(fullUrl, {
    ...restConfig,
    headers,
  });

  // Проверяем статус
  if (response.status === 401) {
    // Токен истёк
    await AsyncStorage.removeItem(STORAGE_TOKEN_KEY);
    throw new Error('Unauthorized');
  }

  if (!response.ok) {
    const errorData = await response.json().catch(() => ({}));
    throw new Error(errorData.message || `HTTP Error ${response.status}`);
  }

  // Если нет контента, возвращаем пустой объект
  if (response.status === 204) {
    return {} as T;
  }

  // Парсим JSON
  return response.json();
};

// Helper функции для работы с токеном (те же что и для axios)
export const authHelpers = {
  saveToken: async (token: string): Promise<void> => {
    await AsyncStorage.setItem(STORAGE_TOKEN_KEY, token);
  },

  getToken: async (): Promise<string | null> => {
    return await AsyncStorage.getItem(STORAGE_TOKEN_KEY);
  },

  removeToken: async (): Promise<void> => {
    await AsyncStorage.removeItem(STORAGE_TOKEN_KEY);
  },
};
