/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * PhotoBank.Api
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type { AccessProfileDto, ProblemDetails } from '../photoBankApi.schemas';

import { customInstance } from '../../client';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const adminAccessProfilesList = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<AccessProfileDto[]>(
    { url: `/api/admin/access-profiles`, method: 'GET', signal },
    options
  );
};

export const getAdminAccessProfilesListQueryKey = () => {
  return [`/api/admin/access-profiles`] as const;
};

export const getAdminAccessProfilesListQueryOptions = <
  TData = Awaited<ReturnType<typeof adminAccessProfilesList>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof adminAccessProfilesList>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminAccessProfilesListQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminAccessProfilesList>>> = ({
    signal,
  }) => adminAccessProfilesList(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminAccessProfilesList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdminAccessProfilesListQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminAccessProfilesList>>
>;
export type AdminAccessProfilesListQueryError = unknown;

export function useAdminAccessProfilesList<
  TData = Awaited<ReturnType<typeof adminAccessProfilesList>>,
  TError = unknown
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof adminAccessProfilesList>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adminAccessProfilesList>>,
          TError,
          Awaited<ReturnType<typeof adminAccessProfilesList>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAdminAccessProfilesList<
  TData = Awaited<ReturnType<typeof adminAccessProfilesList>>,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof adminAccessProfilesList>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adminAccessProfilesList>>,
          TError,
          Awaited<ReturnType<typeof adminAccessProfilesList>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAdminAccessProfilesList<
  TData = Awaited<ReturnType<typeof adminAccessProfilesList>>,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof adminAccessProfilesList>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useAdminAccessProfilesList<
  TData = Awaited<ReturnType<typeof adminAccessProfilesList>>,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof adminAccessProfilesList>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getAdminAccessProfilesListQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const adminAccessProfilesCreate = (
  accessProfileDto: AccessProfileDto,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<AccessProfileDto>(
    {
      url: `/api/admin/access-profiles`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: accessProfileDto,
      signal,
    },
    options
  );
};

export const getAdminAccessProfilesCreateMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminAccessProfilesCreate>>,
    TError,
    { data: AccessProfileDto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminAccessProfilesCreate>>,
  TError,
  { data: AccessProfileDto },
  TContext
> => {
  const mutationKey = ['adminAccessProfilesCreate'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminAccessProfilesCreate>>,
    { data: AccessProfileDto }
  > = (props) => {
    const { data } = props ?? {};

    return adminAccessProfilesCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminAccessProfilesCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminAccessProfilesCreate>>
>;
export type AdminAccessProfilesCreateMutationBody = AccessProfileDto;
export type AdminAccessProfilesCreateMutationError = unknown;

export const useAdminAccessProfilesCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adminAccessProfilesCreate>>,
      TError,
      { data: AccessProfileDto },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof adminAccessProfilesCreate>>,
  TError,
  { data: AccessProfileDto },
  TContext
> => {
  const mutationOptions = getAdminAccessProfilesCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const adminAccessProfilesGet = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<AccessProfileDto>(
    { url: `/api/admin/access-profiles/${id}`, method: 'GET', signal },
    options
  );
};

export const getAdminAccessProfilesGetQueryKey = (id?: number) => {
  return [`/api/admin/access-profiles/${id}`] as const;
};

export const getAdminAccessProfilesGetQueryOptions = <
  TData = Awaited<ReturnType<typeof adminAccessProfilesGet>>,
  TError = ProblemDetails
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof adminAccessProfilesGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminAccessProfilesGetQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminAccessProfilesGet>>> = ({ signal }) =>
    adminAccessProfilesGet(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminAccessProfilesGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdminAccessProfilesGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminAccessProfilesGet>>
>;
export type AdminAccessProfilesGetQueryError = ProblemDetails;

export function useAdminAccessProfilesGet<
  TData = Awaited<ReturnType<typeof adminAccessProfilesGet>>,
  TError = ProblemDetails
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof adminAccessProfilesGet>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adminAccessProfilesGet>>,
          TError,
          Awaited<ReturnType<typeof adminAccessProfilesGet>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAdminAccessProfilesGet<
  TData = Awaited<ReturnType<typeof adminAccessProfilesGet>>,
  TError = ProblemDetails
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof adminAccessProfilesGet>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adminAccessProfilesGet>>,
          TError,
          Awaited<ReturnType<typeof adminAccessProfilesGet>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAdminAccessProfilesGet<
  TData = Awaited<ReturnType<typeof adminAccessProfilesGet>>,
  TError = ProblemDetails
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof adminAccessProfilesGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useAdminAccessProfilesGet<
  TData = Awaited<ReturnType<typeof adminAccessProfilesGet>>,
  TError = ProblemDetails
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof adminAccessProfilesGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getAdminAccessProfilesGetQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const adminAccessProfilesUpdate = (
  id: number,
  accessProfileDto: AccessProfileDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    {
      url: `/api/admin/access-profiles/${id}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: accessProfileDto,
    },
    options
  );
};

export const getAdminAccessProfilesUpdateMutationOptions = <
  TError = ProblemDetails | ProblemDetails,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminAccessProfilesUpdate>>,
    TError,
    { id: number; data: AccessProfileDto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminAccessProfilesUpdate>>,
  TError,
  { id: number; data: AccessProfileDto },
  TContext
> => {
  const mutationKey = ['adminAccessProfilesUpdate'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminAccessProfilesUpdate>>,
    { id: number; data: AccessProfileDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return adminAccessProfilesUpdate(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminAccessProfilesUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminAccessProfilesUpdate>>
>;
export type AdminAccessProfilesUpdateMutationBody = AccessProfileDto;
export type AdminAccessProfilesUpdateMutationError = ProblemDetails | ProblemDetails;

export const useAdminAccessProfilesUpdate = <
  TError = ProblemDetails | ProblemDetails,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adminAccessProfilesUpdate>>,
      TError,
      { id: number; data: AccessProfileDto },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof adminAccessProfilesUpdate>>,
  TError,
  { id: number; data: AccessProfileDto },
  TContext
> => {
  const mutationOptions = getAdminAccessProfilesUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const adminAccessProfilesDelete = (
  id: number,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/api/admin/access-profiles/${id}`, method: 'DELETE' },
    options
  );
};

export const getAdminAccessProfilesDeleteMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminAccessProfilesDelete>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminAccessProfilesDelete>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['adminAccessProfilesDelete'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminAccessProfilesDelete>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return adminAccessProfilesDelete(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminAccessProfilesDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminAccessProfilesDelete>>
>;

export type AdminAccessProfilesDeleteMutationError = unknown;

export const useAdminAccessProfilesDelete = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adminAccessProfilesDelete>>,
      TError,
      { id: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof adminAccessProfilesDelete>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getAdminAccessProfilesDeleteMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const adminAccessProfilesAssignUser = (
  id: number,
  userId: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    { url: `/api/admin/access-profiles/${id}/assign-user/${userId}`, method: 'POST', signal },
    options
  );
};

export const getAdminAccessProfilesAssignUserMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminAccessProfilesAssignUser>>,
    TError,
    { id: number; userId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminAccessProfilesAssignUser>>,
  TError,
  { id: number; userId: string },
  TContext
> => {
  const mutationKey = ['adminAccessProfilesAssignUser'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminAccessProfilesAssignUser>>,
    { id: number; userId: string }
  > = (props) => {
    const { id, userId } = props ?? {};

    return adminAccessProfilesAssignUser(id, userId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminAccessProfilesAssignUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminAccessProfilesAssignUser>>
>;

export type AdminAccessProfilesAssignUserMutationError = unknown;

export const useAdminAccessProfilesAssignUser = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adminAccessProfilesAssignUser>>,
      TError,
      { id: number; userId: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof adminAccessProfilesAssignUser>>,
  TError,
  { id: number; userId: string },
  TContext
> => {
  const mutationOptions = getAdminAccessProfilesAssignUserMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const adminAccessProfilesUnassignUser = (
  id: number,
  userId: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/api/admin/access-profiles/${id}/assign-user/${userId}`, method: 'DELETE' },
    options
  );
};

export const getAdminAccessProfilesUnassignUserMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminAccessProfilesUnassignUser>>,
    TError,
    { id: number; userId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminAccessProfilesUnassignUser>>,
  TError,
  { id: number; userId: string },
  TContext
> => {
  const mutationKey = ['adminAccessProfilesUnassignUser'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminAccessProfilesUnassignUser>>,
    { id: number; userId: string }
  > = (props) => {
    const { id, userId } = props ?? {};

    return adminAccessProfilesUnassignUser(id, userId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminAccessProfilesUnassignUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminAccessProfilesUnassignUser>>
>;

export type AdminAccessProfilesUnassignUserMutationError = unknown;

export const useAdminAccessProfilesUnassignUser = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adminAccessProfilesUnassignUser>>,
      TError,
      { id: number; userId: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof adminAccessProfilesUnassignUser>>,
  TError,
  { id: number; userId: string },
  TContext
> => {
  const mutationOptions = getAdminAccessProfilesUnassignUserMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const adminAccessProfilesAssignRole = (
  id: number,
  roleId: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    { url: `/api/admin/access-profiles/${id}/assign-role/${roleId}`, method: 'POST', signal },
    options
  );
};

export const getAdminAccessProfilesAssignRoleMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminAccessProfilesAssignRole>>,
    TError,
    { id: number; roleId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminAccessProfilesAssignRole>>,
  TError,
  { id: number; roleId: string },
  TContext
> => {
  const mutationKey = ['adminAccessProfilesAssignRole'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminAccessProfilesAssignRole>>,
    { id: number; roleId: string }
  > = (props) => {
    const { id, roleId } = props ?? {};

    return adminAccessProfilesAssignRole(id, roleId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminAccessProfilesAssignRoleMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminAccessProfilesAssignRole>>
>;

export type AdminAccessProfilesAssignRoleMutationError = unknown;

export const useAdminAccessProfilesAssignRole = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adminAccessProfilesAssignRole>>,
      TError,
      { id: number; roleId: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof adminAccessProfilesAssignRole>>,
  TError,
  { id: number; roleId: string },
  TContext
> => {
  const mutationOptions = getAdminAccessProfilesAssignRoleMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const adminAccessProfilesUnassignRole = (
  id: number,
  roleId: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/api/admin/access-profiles/${id}/assign-role/${roleId}`, method: 'DELETE' },
    options
  );
};

export const getAdminAccessProfilesUnassignRoleMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminAccessProfilesUnassignRole>>,
    TError,
    { id: number; roleId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminAccessProfilesUnassignRole>>,
  TError,
  { id: number; roleId: string },
  TContext
> => {
  const mutationKey = ['adminAccessProfilesUnassignRole'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminAccessProfilesUnassignRole>>,
    { id: number; roleId: string }
  > = (props) => {
    const { id, roleId } = props ?? {};

    return adminAccessProfilesUnassignRole(id, roleId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminAccessProfilesUnassignRoleMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminAccessProfilesUnassignRole>>
>;

export type AdminAccessProfilesUnassignRoleMutationError = unknown;

export const useAdminAccessProfilesUnassignRole = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adminAccessProfilesUnassignRole>>,
      TError,
      { id: number; roleId: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof adminAccessProfilesUnassignRole>>,
  TError,
  { id: number; roleId: string },
  TContext
> => {
  const mutationOptions = getAdminAccessProfilesUnassignRoleMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
