/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * PhotoBank.Api
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  CreateUserDto,
  ProblemDetails,
  ResetPasswordDto,
  SetRolesDto,
  UpdateUserDto,
  UserDto,
  UsersGetAllParams,
} from '../photoBankApi.schemas';

import { customInstance } from '../../client';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const usersGetAll = (
  params?: UsersGetAllParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<UserDto[]>(
    { url: `/api/admin/users`, method: 'GET', params, signal },
    options
  );
};

export const getUsersGetAllQueryKey = (params?: UsersGetAllParams) => {
  return [`/api/admin/users`, ...(params ? [params] : [])] as const;
};

export const getUsersGetAllQueryOptions = <
  TData = Awaited<ReturnType<typeof usersGetAll>>,
  TError = unknown
>(
  params?: UsersGetAllParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetAll>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUsersGetAllQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof usersGetAll>>> = ({ signal }) =>
    usersGetAll(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof usersGetAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type UsersGetAllQueryResult = NonNullable<Awaited<ReturnType<typeof usersGetAll>>>;
export type UsersGetAllQueryError = unknown;

export function useUsersGetAll<TData = Awaited<ReturnType<typeof usersGetAll>>, TError = unknown>(
  params: undefined | UsersGetAllParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetAll>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersGetAll>>,
          TError,
          Awaited<ReturnType<typeof usersGetAll>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useUsersGetAll<TData = Awaited<ReturnType<typeof usersGetAll>>, TError = unknown>(
  params?: UsersGetAllParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetAll>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersGetAll>>,
          TError,
          Awaited<ReturnType<typeof usersGetAll>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useUsersGetAll<TData = Awaited<ReturnType<typeof usersGetAll>>, TError = unknown>(
  params?: UsersGetAllParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetAll>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useUsersGetAll<TData = Awaited<ReturnType<typeof usersGetAll>>, TError = unknown>(
  params?: UsersGetAllParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetAll>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getUsersGetAllQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const usersCreate = (
  createUserDto: CreateUserDto,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<UserDto>(
    {
      url: `/api/admin/users`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createUserDto,
      signal,
    },
    options
  );
};

export const getUsersCreateMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersCreate>>,
    TError,
    { data: CreateUserDto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersCreate>>,
  TError,
  { data: CreateUserDto },
  TContext
> => {
  const mutationKey = ['usersCreate'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersCreate>>,
    { data: CreateUserDto }
  > = (props) => {
    const { data } = props ?? {};

    return usersCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersCreateMutationResult = NonNullable<Awaited<ReturnType<typeof usersCreate>>>;
export type UsersCreateMutationBody = CreateUserDto;
export type UsersCreateMutationError = ProblemDetails;

export const useUsersCreate = <TError = ProblemDetails, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof usersCreate>>,
      TError,
      { data: CreateUserDto },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof usersCreate>>,
  TError,
  { data: CreateUserDto },
  TContext
> => {
  const mutationOptions = getUsersCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const usersUpdate = (
  id: string,
  updateUserDto: UpdateUserDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    {
      url: `/api/admin/users/${id}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: updateUserDto,
    },
    options
  );
};

export const getUsersUpdateMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersUpdate>>,
    TError,
    { id: string; data: UpdateUserDto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersUpdate>>,
  TError,
  { id: string; data: UpdateUserDto },
  TContext
> => {
  const mutationKey = ['usersUpdate'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersUpdate>>,
    { id: string; data: UpdateUserDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return usersUpdate(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof usersUpdate>>>;
export type UsersUpdateMutationBody = UpdateUserDto;
export type UsersUpdateMutationError = ProblemDetails;

export const useUsersUpdate = <TError = ProblemDetails, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof usersUpdate>>,
      TError,
      { id: string; data: UpdateUserDto },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof usersUpdate>>,
  TError,
  { id: string; data: UpdateUserDto },
  TContext
> => {
  const mutationOptions = getUsersUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const usersDelete = (id: string, options?: SecondParameter<typeof customInstance>) => {
  return customInstance<void>({ url: `/api/admin/users/${id}`, method: 'DELETE' }, options);
};

export const getUsersDeleteMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersDelete>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersDelete>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['usersDelete'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersDelete>>, { id: string }> = (
    props
  ) => {
    const { id } = props ?? {};

    return usersDelete(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof usersDelete>>>;

export type UsersDeleteMutationError = ProblemDetails;

export const useUsersDelete = <TError = ProblemDetails, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof usersDelete>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<Awaited<ReturnType<typeof usersDelete>>, TError, { id: string }, TContext> => {
  const mutationOptions = getUsersDeleteMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const usersResetPassword = (
  id: string,
  resetPasswordDto: ResetPasswordDto,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    {
      url: `/api/admin/users/${id}/reset-password`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: resetPasswordDto,
      signal,
    },
    options
  );
};

export const getUsersResetPasswordMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersResetPassword>>,
    TError,
    { id: string; data: ResetPasswordDto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersResetPassword>>,
  TError,
  { id: string; data: ResetPasswordDto },
  TContext
> => {
  const mutationKey = ['usersResetPassword'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersResetPassword>>,
    { id: string; data: ResetPasswordDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return usersResetPassword(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersResetPasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersResetPassword>>
>;
export type UsersResetPasswordMutationBody = ResetPasswordDto;
export type UsersResetPasswordMutationError = ProblemDetails;

export const useUsersResetPassword = <TError = ProblemDetails, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof usersResetPassword>>,
      TError,
      { id: string; data: ResetPasswordDto },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof usersResetPassword>>,
  TError,
  { id: string; data: ResetPasswordDto },
  TContext
> => {
  const mutationOptions = getUsersResetPasswordMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const usersSetRoles = (
  id: string,
  setRolesDto: SetRolesDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    {
      url: `/api/admin/users/${id}/roles`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: setRolesDto,
    },
    options
  );
};

export const getUsersSetRolesMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersSetRoles>>,
    TError,
    { id: string; data: SetRolesDto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersSetRoles>>,
  TError,
  { id: string; data: SetRolesDto },
  TContext
> => {
  const mutationKey = ['usersSetRoles'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersSetRoles>>,
    { id: string; data: SetRolesDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return usersSetRoles(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersSetRolesMutationResult = NonNullable<Awaited<ReturnType<typeof usersSetRoles>>>;
export type UsersSetRolesMutationBody = SetRolesDto;
export type UsersSetRolesMutationError = ProblemDetails;

export const useUsersSetRoles = <TError = ProblemDetails, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof usersSetRoles>>,
      TError,
      { id: string; data: SetRolesDto },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof usersSetRoles>>,
  TError,
  { id: string; data: SetRolesDto },
  TContext
> => {
  const mutationOptions = getUsersSetRolesMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
