/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * PhotoBank.Api
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  LoginRequestDto,
  LoginResponseDto,
  ProblemDetails,
  RegisterRequestDto,
  TelegramExchangeRequest,
  TelegramExchangeResponse,
  TelegramSubscriptionDto,
  UpdateUserDto,
  UserDto,
} from '../photoBankApi.schemas';

import { customInstance } from '../../client';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const authLogin = (
  loginRequestDto: LoginRequestDto,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<LoginResponseDto>(
    {
      url: `/api/auth/login`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: loginRequestDto,
      signal,
    },
    options
  );
};

export const getAuthLoginMutationOptions = <TError = ProblemDetails, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authLogin>>,
    TError,
    { data: LoginRequestDto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authLogin>>,
  TError,
  { data: LoginRequestDto },
  TContext
> => {
  const mutationKey = ['authLogin'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authLogin>>,
    { data: LoginRequestDto }
  > = (props) => {
    const { data } = props ?? {};

    return authLogin(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthLoginMutationResult = NonNullable<Awaited<ReturnType<typeof authLogin>>>;
export type AuthLoginMutationBody = LoginRequestDto;
export type AuthLoginMutationError = ProblemDetails;

export const useAuthLogin = <TError = ProblemDetails, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authLogin>>,
      TError,
      { data: LoginRequestDto },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof authLogin>>,
  TError,
  { data: LoginRequestDto },
  TContext
> => {
  const mutationOptions = getAuthLoginMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const authRegister = (
  registerRequestDto: RegisterRequestDto,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    {
      url: `/api/auth/register`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: registerRequestDto,
      signal,
    },
    options
  );
};

export const getAuthRegisterMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authRegister>>,
    TError,
    { data: RegisterRequestDto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authRegister>>,
  TError,
  { data: RegisterRequestDto },
  TContext
> => {
  const mutationKey = ['authRegister'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authRegister>>,
    { data: RegisterRequestDto }
  > = (props) => {
    const { data } = props ?? {};

    return authRegister(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof authRegister>>>;
export type AuthRegisterMutationBody = RegisterRequestDto;
export type AuthRegisterMutationError = ProblemDetails;

export const useAuthRegister = <TError = ProblemDetails, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authRegister>>,
      TError,
      { data: RegisterRequestDto },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof authRegister>>,
  TError,
  { data: RegisterRequestDto },
  TContext
> => {
  const mutationOptions = getAuthRegisterMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const authGetUser = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<UserDto>({ url: `/api/auth/user`, method: 'GET', signal }, options);
};

export const getAuthGetUserQueryKey = () => {
  return [`/api/auth/user`] as const;
};

export const getAuthGetUserQueryOptions = <
  TData = Awaited<ReturnType<typeof authGetUser>>,
  TError = unknown
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof authGetUser>>, TError, TData>>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAuthGetUserQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof authGetUser>>> = ({ signal }) =>
    authGetUser(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof authGetUser>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AuthGetUserQueryResult = NonNullable<Awaited<ReturnType<typeof authGetUser>>>;
export type AuthGetUserQueryError = unknown;

export function useAuthGetUser<TData = Awaited<ReturnType<typeof authGetUser>>, TError = unknown>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof authGetUser>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof authGetUser>>,
          TError,
          Awaited<ReturnType<typeof authGetUser>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAuthGetUser<TData = Awaited<ReturnType<typeof authGetUser>>, TError = unknown>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof authGetUser>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof authGetUser>>,
          TError,
          Awaited<ReturnType<typeof authGetUser>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAuthGetUser<TData = Awaited<ReturnType<typeof authGetUser>>, TError = unknown>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof authGetUser>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useAuthGetUser<TData = Awaited<ReturnType<typeof authGetUser>>, TError = unknown>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof authGetUser>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getAuthGetUserQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const authUpdateUser = (
  updateUserDto: UpdateUserDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    {
      url: `/api/auth/user`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: updateUserDto,
    },
    options
  );
};

export const getAuthUpdateUserMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authUpdateUser>>,
    TError,
    { data: UpdateUserDto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authUpdateUser>>,
  TError,
  { data: UpdateUserDto },
  TContext
> => {
  const mutationKey = ['authUpdateUser'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authUpdateUser>>,
    { data: UpdateUserDto }
  > = (props) => {
    const { data } = props ?? {};

    return authUpdateUser(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthUpdateUserMutationResult = NonNullable<Awaited<ReturnType<typeof authUpdateUser>>>;
export type AuthUpdateUserMutationBody = UpdateUserDto;
export type AuthUpdateUserMutationError = ProblemDetails;

export const useAuthUpdateUser = <TError = ProblemDetails, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authUpdateUser>>,
      TError,
      { data: UpdateUserDto },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof authUpdateUser>>,
  TError,
  { data: UpdateUserDto },
  TContext
> => {
  const mutationOptions = getAuthUpdateUserMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const authGetTelegramSubscriptions = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<TelegramSubscriptionDto[]>(
    { url: `/api/auth/telegram/subscriptions`, method: 'GET', signal },
    options
  );
};

export const getAuthGetTelegramSubscriptionsQueryKey = () => {
  return [`/api/auth/telegram/subscriptions`] as const;
};

export const getAuthGetTelegramSubscriptionsQueryOptions = <
  TData = Awaited<ReturnType<typeof authGetTelegramSubscriptions>>,
  TError = ProblemDetails
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof authGetTelegramSubscriptions>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAuthGetTelegramSubscriptionsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof authGetTelegramSubscriptions>>> = ({
    signal,
  }) => authGetTelegramSubscriptions(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof authGetTelegramSubscriptions>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AuthGetTelegramSubscriptionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof authGetTelegramSubscriptions>>
>;
export type AuthGetTelegramSubscriptionsQueryError = ProblemDetails;

export function useAuthGetTelegramSubscriptions<
  TData = Awaited<ReturnType<typeof authGetTelegramSubscriptions>>,
  TError = ProblemDetails
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof authGetTelegramSubscriptions>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof authGetTelegramSubscriptions>>,
          TError,
          Awaited<ReturnType<typeof authGetTelegramSubscriptions>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAuthGetTelegramSubscriptions<
  TData = Awaited<ReturnType<typeof authGetTelegramSubscriptions>>,
  TError = ProblemDetails
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof authGetTelegramSubscriptions>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof authGetTelegramSubscriptions>>,
          TError,
          Awaited<ReturnType<typeof authGetTelegramSubscriptions>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAuthGetTelegramSubscriptions<
  TData = Awaited<ReturnType<typeof authGetTelegramSubscriptions>>,
  TError = ProblemDetails
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof authGetTelegramSubscriptions>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useAuthGetTelegramSubscriptions<
  TData = Awaited<ReturnType<typeof authGetTelegramSubscriptions>>,
  TError = ProblemDetails
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof authGetTelegramSubscriptions>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getAuthGetTelegramSubscriptionsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const authTelegramExchange = (
  telegramExchangeRequest: TelegramExchangeRequest,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<TelegramExchangeResponse>(
    {
      url: `/api/auth/telegram/exchange`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: telegramExchangeRequest,
      signal,
    },
    options
  );
};

export const getAuthTelegramExchangeMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authTelegramExchange>>,
    TError,
    { data: TelegramExchangeRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authTelegramExchange>>,
  TError,
  { data: TelegramExchangeRequest },
  TContext
> => {
  const mutationKey = ['authTelegramExchange'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authTelegramExchange>>,
    { data: TelegramExchangeRequest }
  > = (props) => {
    const { data } = props ?? {};

    return authTelegramExchange(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthTelegramExchangeMutationResult = NonNullable<
  Awaited<ReturnType<typeof authTelegramExchange>>
>;
export type AuthTelegramExchangeMutationBody = TelegramExchangeRequest;
export type AuthTelegramExchangeMutationError = ProblemDetails;

export const useAuthTelegramExchange = <TError = ProblemDetails, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authTelegramExchange>>,
      TError,
      { data: TelegramExchangeRequest },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof authTelegramExchange>>,
  TError,
  { data: TelegramExchangeRequest },
  TContext
> => {
  const mutationOptions = getAuthTelegramExchangeMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const authGetEffective = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    { url: `/api/auth/debug/effective-access`, method: 'GET', signal },
    options
  );
};

export const getAuthGetEffectiveQueryKey = () => {
  return [`/api/auth/debug/effective-access`] as const;
};

export const getAuthGetEffectiveQueryOptions = <
  TData = Awaited<ReturnType<typeof authGetEffective>>,
  TError = unknown
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof authGetEffective>>, TError, TData>>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAuthGetEffectiveQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof authGetEffective>>> = ({ signal }) =>
    authGetEffective(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof authGetEffective>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AuthGetEffectiveQueryResult = NonNullable<Awaited<ReturnType<typeof authGetEffective>>>;
export type AuthGetEffectiveQueryError = unknown;

export function useAuthGetEffective<
  TData = Awaited<ReturnType<typeof authGetEffective>>,
  TError = unknown
>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof authGetEffective>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof authGetEffective>>,
          TError,
          Awaited<ReturnType<typeof authGetEffective>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAuthGetEffective<
  TData = Awaited<ReturnType<typeof authGetEffective>>,
  TError = unknown
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof authGetEffective>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof authGetEffective>>,
          TError,
          Awaited<ReturnType<typeof authGetEffective>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAuthGetEffective<
  TData = Awaited<ReturnType<typeof authGetEffective>>,
  TError = unknown
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof authGetEffective>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useAuthGetEffective<
  TData = Awaited<ReturnType<typeof authGetEffective>>,
  TError = unknown
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof authGetEffective>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getAuthGetEffectiveQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
