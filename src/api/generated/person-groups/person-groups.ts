/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * PhotoBank.Api
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type { PersonGroupDto } from '../photoBankApi.schemas';

import { customInstance } from '../../client';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const personGroupsGetAll = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<PersonGroupDto[]>(
    { url: `/api/persongroups`, method: 'GET', signal },
    options
  );
};

export const getPersonGroupsGetAllQueryKey = () => {
  return [`/api/persongroups`] as const;
};

export const getPersonGroupsGetAllQueryOptions = <
  TData = Awaited<ReturnType<typeof personGroupsGetAll>>,
  TError = unknown
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof personGroupsGetAll>>, TError, TData>>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getPersonGroupsGetAllQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof personGroupsGetAll>>> = ({ signal }) =>
    personGroupsGetAll(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof personGroupsGetAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PersonGroupsGetAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof personGroupsGetAll>>
>;
export type PersonGroupsGetAllQueryError = unknown;

export function usePersonGroupsGetAll<
  TData = Awaited<ReturnType<typeof personGroupsGetAll>>,
  TError = unknown
>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof personGroupsGetAll>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof personGroupsGetAll>>,
          TError,
          Awaited<ReturnType<typeof personGroupsGetAll>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePersonGroupsGetAll<
  TData = Awaited<ReturnType<typeof personGroupsGetAll>>,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof personGroupsGetAll>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof personGroupsGetAll>>,
          TError,
          Awaited<ReturnType<typeof personGroupsGetAll>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePersonGroupsGetAll<
  TData = Awaited<ReturnType<typeof personGroupsGetAll>>,
  TError = unknown
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof personGroupsGetAll>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePersonGroupsGetAll<
  TData = Awaited<ReturnType<typeof personGroupsGetAll>>,
  TError = unknown
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof personGroupsGetAll>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getPersonGroupsGetAllQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const personGroupsCreate = (
  personGroupDto: PersonGroupDto,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<PersonGroupDto>(
    {
      url: `/api/persongroups`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: personGroupDto,
      signal,
    },
    options
  );
};

export const getPersonGroupsCreateMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof personGroupsCreate>>,
    TError,
    { data: PersonGroupDto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof personGroupsCreate>>,
  TError,
  { data: PersonGroupDto },
  TContext
> => {
  const mutationKey = ['personGroupsCreate'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof personGroupsCreate>>,
    { data: PersonGroupDto }
  > = (props) => {
    const { data } = props ?? {};

    return personGroupsCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PersonGroupsCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof personGroupsCreate>>
>;
export type PersonGroupsCreateMutationBody = PersonGroupDto;
export type PersonGroupsCreateMutationError = unknown;

export const usePersonGroupsCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof personGroupsCreate>>,
      TError,
      { data: PersonGroupDto },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof personGroupsCreate>>,
  TError,
  { data: PersonGroupDto },
  TContext
> => {
  const mutationOptions = getPersonGroupsCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const personGroupsUpdate = (
  groupId: number,
  personGroupDto: PersonGroupDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<PersonGroupDto>(
    {
      url: `/api/persongroups/${groupId}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: personGroupDto,
    },
    options
  );
};

export const getPersonGroupsUpdateMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof personGroupsUpdate>>,
    TError,
    { groupId: number; data: PersonGroupDto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof personGroupsUpdate>>,
  TError,
  { groupId: number; data: PersonGroupDto },
  TContext
> => {
  const mutationKey = ['personGroupsUpdate'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof personGroupsUpdate>>,
    { groupId: number; data: PersonGroupDto }
  > = (props) => {
    const { groupId, data } = props ?? {};

    return personGroupsUpdate(groupId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PersonGroupsUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof personGroupsUpdate>>
>;
export type PersonGroupsUpdateMutationBody = PersonGroupDto;
export type PersonGroupsUpdateMutationError = unknown;

export const usePersonGroupsUpdate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof personGroupsUpdate>>,
      TError,
      { groupId: number; data: PersonGroupDto },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof personGroupsUpdate>>,
  TError,
  { groupId: number; data: PersonGroupDto },
  TContext
> => {
  const mutationOptions = getPersonGroupsUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const personGroupsDelete = (
  groupId: number,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>({ url: `/api/persongroups/${groupId}`, method: 'DELETE' }, options);
};

export const getPersonGroupsDeleteMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof personGroupsDelete>>,
    TError,
    { groupId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof personGroupsDelete>>,
  TError,
  { groupId: number },
  TContext
> => {
  const mutationKey = ['personGroupsDelete'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof personGroupsDelete>>,
    { groupId: number }
  > = (props) => {
    const { groupId } = props ?? {};

    return personGroupsDelete(groupId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PersonGroupsDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof personGroupsDelete>>
>;

export type PersonGroupsDeleteMutationError = unknown;

export const usePersonGroupsDelete = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof personGroupsDelete>>,
      TError,
      { groupId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof personGroupsDelete>>,
  TError,
  { groupId: number },
  TContext
> => {
  const mutationOptions = getPersonGroupsDeleteMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const personGroupsAddPerson = (
  groupId: number,
  personId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    { url: `/api/persongroups/${groupId}/persons/${personId}`, method: 'POST', signal },
    options
  );
};

export const getPersonGroupsAddPersonMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof personGroupsAddPerson>>,
    TError,
    { groupId: number; personId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof personGroupsAddPerson>>,
  TError,
  { groupId: number; personId: number },
  TContext
> => {
  const mutationKey = ['personGroupsAddPerson'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof personGroupsAddPerson>>,
    { groupId: number; personId: number }
  > = (props) => {
    const { groupId, personId } = props ?? {};

    return personGroupsAddPerson(groupId, personId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PersonGroupsAddPersonMutationResult = NonNullable<
  Awaited<ReturnType<typeof personGroupsAddPerson>>
>;

export type PersonGroupsAddPersonMutationError = unknown;

export const usePersonGroupsAddPerson = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof personGroupsAddPerson>>,
      TError,
      { groupId: number; personId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof personGroupsAddPerson>>,
  TError,
  { groupId: number; personId: number },
  TContext
> => {
  const mutationOptions = getPersonGroupsAddPersonMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const personGroupsRemovePerson = (
  groupId: number,
  personId: number,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/api/persongroups/${groupId}/persons/${personId}`, method: 'DELETE' },
    options
  );
};

export const getPersonGroupsRemovePersonMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof personGroupsRemovePerson>>,
    TError,
    { groupId: number; personId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof personGroupsRemovePerson>>,
  TError,
  { groupId: number; personId: number },
  TContext
> => {
  const mutationKey = ['personGroupsRemovePerson'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof personGroupsRemovePerson>>,
    { groupId: number; personId: number }
  > = (props) => {
    const { groupId, personId } = props ?? {};

    return personGroupsRemovePerson(groupId, personId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PersonGroupsRemovePersonMutationResult = NonNullable<
  Awaited<ReturnType<typeof personGroupsRemovePerson>>
>;

export type PersonGroupsRemovePersonMutationError = unknown;

export const usePersonGroupsRemovePerson = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof personGroupsRemovePerson>>,
      TError,
      { groupId: number; personId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof personGroupsRemovePerson>>,
  TError,
  { groupId: number; personId: number },
  TContext
> => {
  const mutationOptions = getPersonGroupsRemovePersonMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
