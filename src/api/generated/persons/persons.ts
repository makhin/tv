/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * PhotoBank.Api
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type { PersonDto } from '../photoBankApi.schemas';

import { customInstance } from '../../client';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const personsGetAll = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<PersonDto[]>({ url: `/api/persons`, method: 'GET', signal }, options);
};

export const getPersonsGetAllQueryKey = () => {
  return [`/api/persons`] as const;
};

export const getPersonsGetAllQueryOptions = <
  TData = Awaited<ReturnType<typeof personsGetAll>>,
  TError = unknown
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof personsGetAll>>, TError, TData>>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getPersonsGetAllQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof personsGetAll>>> = ({ signal }) =>
    personsGetAll(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof personsGetAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PersonsGetAllQueryResult = NonNullable<Awaited<ReturnType<typeof personsGetAll>>>;
export type PersonsGetAllQueryError = unknown;

export function usePersonsGetAll<
  TData = Awaited<ReturnType<typeof personsGetAll>>,
  TError = unknown
>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof personsGetAll>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof personsGetAll>>,
          TError,
          Awaited<ReturnType<typeof personsGetAll>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePersonsGetAll<
  TData = Awaited<ReturnType<typeof personsGetAll>>,
  TError = unknown
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof personsGetAll>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof personsGetAll>>,
          TError,
          Awaited<ReturnType<typeof personsGetAll>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePersonsGetAll<
  TData = Awaited<ReturnType<typeof personsGetAll>>,
  TError = unknown
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof personsGetAll>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePersonsGetAll<
  TData = Awaited<ReturnType<typeof personsGetAll>>,
  TError = unknown
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof personsGetAll>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getPersonsGetAllQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const personsCreate = (
  personDto: PersonDto,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<PersonDto>(
    {
      url: `/api/persons`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: personDto,
      signal,
    },
    options
  );
};

export const getPersonsCreateMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof personsCreate>>,
    TError,
    { data: PersonDto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof personsCreate>>,
  TError,
  { data: PersonDto },
  TContext
> => {
  const mutationKey = ['personsCreate'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof personsCreate>>,
    { data: PersonDto }
  > = (props) => {
    const { data } = props ?? {};

    return personsCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PersonsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof personsCreate>>>;
export type PersonsCreateMutationBody = PersonDto;
export type PersonsCreateMutationError = unknown;

export const usePersonsCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof personsCreate>>,
      TError,
      { data: PersonDto },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof personsCreate>>,
  TError,
  { data: PersonDto },
  TContext
> => {
  const mutationOptions = getPersonsCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const personsUpdate = (
  personId: number,
  personDto: PersonDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<PersonDto>(
    {
      url: `/api/persons/${personId}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: personDto,
    },
    options
  );
};

export const getPersonsUpdateMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof personsUpdate>>,
    TError,
    { personId: number; data: PersonDto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof personsUpdate>>,
  TError,
  { personId: number; data: PersonDto },
  TContext
> => {
  const mutationKey = ['personsUpdate'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof personsUpdate>>,
    { personId: number; data: PersonDto }
  > = (props) => {
    const { personId, data } = props ?? {};

    return personsUpdate(personId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PersonsUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof personsUpdate>>>;
export type PersonsUpdateMutationBody = PersonDto;
export type PersonsUpdateMutationError = unknown;

export const usePersonsUpdate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof personsUpdate>>,
      TError,
      { personId: number; data: PersonDto },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof personsUpdate>>,
  TError,
  { personId: number; data: PersonDto },
  TContext
> => {
  const mutationOptions = getPersonsUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const personsDelete = (
  personId: number,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>({ url: `/api/persons/${personId}`, method: 'DELETE' }, options);
};

export const getPersonsDeleteMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof personsDelete>>,
    TError,
    { personId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof personsDelete>>,
  TError,
  { personId: number },
  TContext
> => {
  const mutationKey = ['personsDelete'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof personsDelete>>,
    { personId: number }
  > = (props) => {
    const { personId } = props ?? {};

    return personsDelete(personId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PersonsDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof personsDelete>>>;

export type PersonsDeleteMutationError = unknown;

export const usePersonsDelete = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof personsDelete>>,
      TError,
      { personId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof personsDelete>>,
  TError,
  { personId: number },
  TContext
> => {
  const mutationOptions = getPersonsDeleteMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
