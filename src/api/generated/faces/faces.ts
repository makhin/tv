/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * PhotoBank.Api
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  FaceDto,
  FaceDtoPageResponse,
  FacesGetFacesPageParams,
} from '../photoBankApi.schemas';

import { customInstance } from '../../client';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const facesGetFacesPage = (
  params?: FacesGetFacesPageParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<FaceDtoPageResponse>(
    { url: `/api/faces`, method: 'GET', params, signal },
    options
  );
};

export const getFacesGetFacesPageQueryKey = (params?: FacesGetFacesPageParams) => {
  return [`/api/faces`, ...(params ? [params] : [])] as const;
};

export const getFacesGetFacesPageQueryOptions = <
  TData = Awaited<ReturnType<typeof facesGetFacesPage>>,
  TError = unknown
>(
  params?: FacesGetFacesPageParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof facesGetFacesPage>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFacesGetFacesPageQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof facesGetFacesPage>>> = ({ signal }) =>
    facesGetFacesPage(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof facesGetFacesPage>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FacesGetFacesPageQueryResult = NonNullable<
  Awaited<ReturnType<typeof facesGetFacesPage>>
>;
export type FacesGetFacesPageQueryError = unknown;

export function useFacesGetFacesPage<
  TData = Awaited<ReturnType<typeof facesGetFacesPage>>,
  TError = unknown
>(
  params: undefined | FacesGetFacesPageParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof facesGetFacesPage>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof facesGetFacesPage>>,
          TError,
          Awaited<ReturnType<typeof facesGetFacesPage>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFacesGetFacesPage<
  TData = Awaited<ReturnType<typeof facesGetFacesPage>>,
  TError = unknown
>(
  params?: FacesGetFacesPageParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof facesGetFacesPage>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof facesGetFacesPage>>,
          TError,
          Awaited<ReturnType<typeof facesGetFacesPage>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFacesGetFacesPage<
  TData = Awaited<ReturnType<typeof facesGetFacesPage>>,
  TError = unknown
>(
  params?: FacesGetFacesPageParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof facesGetFacesPage>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useFacesGetFacesPage<
  TData = Awaited<ReturnType<typeof facesGetFacesPage>>,
  TError = unknown
>(
  params?: FacesGetFacesPageParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof facesGetFacesPage>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFacesGetFacesPageQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const facesUpdate = (faceDto: FaceDto, options?: SecondParameter<typeof customInstance>) => {
  return customInstance<void>(
    {
      url: `/api/faces`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: faceDto,
    },
    options
  );
};

export const getFacesUpdateMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof facesUpdate>>,
    TError,
    { data: FaceDto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof facesUpdate>>,
  TError,
  { data: FaceDto },
  TContext
> => {
  const mutationKey = ['facesUpdate'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof facesUpdate>>, { data: FaceDto }> = (
    props
  ) => {
    const { data } = props ?? {};

    return facesUpdate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type FacesUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof facesUpdate>>>;
export type FacesUpdateMutationBody = FaceDto;
export type FacesUpdateMutationError = unknown;

export const useFacesUpdate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof facesUpdate>>,
      TError,
      { data: FaceDto },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof facesUpdate>>,
  TError,
  { data: FaceDto },
  TContext
> => {
  const mutationOptions = getFacesUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
