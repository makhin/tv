/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * PhotoBank.Api
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  FilterDto,
  PhotoDto,
  PhotoItemDto,
  PhotoItemDtoPageResponse,
  PhotosGetDuplicatesParams,
  PhotosUploadBody,
  ProblemDetails,
} from '../photoBankApi.schemas';

import { customInstance } from '../../client';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const photosSearchPhotos = (
  filterDto: FilterDto,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<PhotoItemDtoPageResponse>(
    {
      url: `/api/photos/search`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: filterDto,
      signal,
    },
    options
  );
};

export const getPhotosSearchPhotosMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof photosSearchPhotos>>,
    TError,
    { data: FilterDto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof photosSearchPhotos>>,
  TError,
  { data: FilterDto },
  TContext
> => {
  const mutationKey = ['photosSearchPhotos'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof photosSearchPhotos>>,
    { data: FilterDto }
  > = (props) => {
    const { data } = props ?? {};

    return photosSearchPhotos(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PhotosSearchPhotosMutationResult = NonNullable<
  Awaited<ReturnType<typeof photosSearchPhotos>>
>;
export type PhotosSearchPhotosMutationBody = FilterDto;
export type PhotosSearchPhotosMutationError = ProblemDetails;

export const usePhotosSearchPhotos = <TError = ProblemDetails, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof photosSearchPhotos>>,
      TError,
      { data: FilterDto },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof photosSearchPhotos>>,
  TError,
  { data: FilterDto },
  TContext
> => {
  const mutationOptions = getPhotosSearchPhotosMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const photosGetPhoto = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<PhotoDto>({ url: `/api/photos/${id}`, method: 'GET', signal }, options);
};

export const getPhotosGetPhotoQueryKey = (id?: number) => {
  return [`/api/photos/${id}`] as const;
};

export const getPhotosGetPhotoQueryOptions = <
  TData = Awaited<ReturnType<typeof photosGetPhoto>>,
  TError = ProblemDetails
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof photosGetPhoto>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getPhotosGetPhotoQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof photosGetPhoto>>> = ({ signal }) =>
    photosGetPhoto(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof photosGetPhoto>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PhotosGetPhotoQueryResult = NonNullable<Awaited<ReturnType<typeof photosGetPhoto>>>;
export type PhotosGetPhotoQueryError = ProblemDetails;

export function usePhotosGetPhoto<
  TData = Awaited<ReturnType<typeof photosGetPhoto>>,
  TError = ProblemDetails
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof photosGetPhoto>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof photosGetPhoto>>,
          TError,
          Awaited<ReturnType<typeof photosGetPhoto>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePhotosGetPhoto<
  TData = Awaited<ReturnType<typeof photosGetPhoto>>,
  TError = ProblemDetails
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof photosGetPhoto>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof photosGetPhoto>>,
          TError,
          Awaited<ReturnType<typeof photosGetPhoto>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePhotosGetPhoto<
  TData = Awaited<ReturnType<typeof photosGetPhoto>>,
  TError = ProblemDetails
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof photosGetPhoto>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePhotosGetPhoto<
  TData = Awaited<ReturnType<typeof photosGetPhoto>>,
  TError = ProblemDetails
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof photosGetPhoto>>, TError, TData>>;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getPhotosGetPhotoQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const photosUpload = (
  photosUploadBody: PhotosUploadBody,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  const formData = new FormData();
  if (photosUploadBody.files !== undefined) {
    photosUploadBody.files.forEach((value) => formData.append(`files`, value));
  }
  if (photosUploadBody.storageId !== undefined) {
    formData.append(`storageId`, photosUploadBody.storageId.toString());
  }
  if (photosUploadBody.path !== undefined) {
    formData.append(`path`, photosUploadBody.path);
  }

  return customInstance<void>(
    {
      url: `/api/photos/upload`,
      method: 'POST',
      headers: { 'Content-Type': 'multipart/form-data' },
      data: formData,
      signal,
    },
    options
  );
};

export const getPhotosUploadMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof photosUpload>>,
    TError,
    { data: PhotosUploadBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof photosUpload>>,
  TError,
  { data: PhotosUploadBody },
  TContext
> => {
  const mutationKey = ['photosUpload'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof photosUpload>>,
    { data: PhotosUploadBody }
  > = (props) => {
    const { data } = props ?? {};

    return photosUpload(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PhotosUploadMutationResult = NonNullable<Awaited<ReturnType<typeof photosUpload>>>;
export type PhotosUploadMutationBody = PhotosUploadBody;
export type PhotosUploadMutationError = unknown;

export const usePhotosUpload = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof photosUpload>>,
      TError,
      { data: PhotosUploadBody },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof photosUpload>>,
  TError,
  { data: PhotosUploadBody },
  TContext
> => {
  const mutationOptions = getPhotosUploadMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const photosGetDuplicates = (
  params?: PhotosGetDuplicatesParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<PhotoItemDto[]>(
    { url: `/api/photos/duplicates`, method: 'GET', params, signal },
    options
  );
};

export const getPhotosGetDuplicatesQueryKey = (params?: PhotosGetDuplicatesParams) => {
  return [`/api/photos/duplicates`, ...(params ? [params] : [])] as const;
};

export const getPhotosGetDuplicatesQueryOptions = <
  TData = Awaited<ReturnType<typeof photosGetDuplicates>>,
  TError = unknown
>(
  params?: PhotosGetDuplicatesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof photosGetDuplicates>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getPhotosGetDuplicatesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof photosGetDuplicates>>> = ({ signal }) =>
    photosGetDuplicates(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof photosGetDuplicates>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PhotosGetDuplicatesQueryResult = NonNullable<
  Awaited<ReturnType<typeof photosGetDuplicates>>
>;
export type PhotosGetDuplicatesQueryError = unknown;

export function usePhotosGetDuplicates<
  TData = Awaited<ReturnType<typeof photosGetDuplicates>>,
  TError = unknown
>(
  params: undefined | PhotosGetDuplicatesParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof photosGetDuplicates>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof photosGetDuplicates>>,
          TError,
          Awaited<ReturnType<typeof photosGetDuplicates>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePhotosGetDuplicates<
  TData = Awaited<ReturnType<typeof photosGetDuplicates>>,
  TError = unknown
>(
  params?: PhotosGetDuplicatesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof photosGetDuplicates>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof photosGetDuplicates>>,
          TError,
          Awaited<ReturnType<typeof photosGetDuplicates>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePhotosGetDuplicates<
  TData = Awaited<ReturnType<typeof photosGetDuplicates>>,
  TError = unknown
>(
  params?: PhotosGetDuplicatesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof photosGetDuplicates>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePhotosGetDuplicates<
  TData = Awaited<ReturnType<typeof photosGetDuplicates>>,
  TError = unknown
>(
  params?: PhotosGetDuplicatesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof photosGetDuplicates>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getPhotosGetDuplicatesQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
